import streamlit as st
from datetime import datetime
import hh_api_integration_v2 as hh
from bs4 import BeautifulSoup

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –°—Ç–∏–ª–∏ (—Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏–∑ –≤–∞—à–µ–π –≤–µ—Ä—Å–∏–∏) ---
st.set_page_config(
    page_title="ForteTalent",
    page_icon="üß≠",
    layout="wide",
    initial_sidebar_state="expanded"
)

st.markdown("""
<style>
    /* ... (–í–∞—à–∏ —Å—Ç–∏–ª–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ... */
    .vacancy-card {
        background-color: #FFFFFF; border: 1px solid #E0E1DD; border-radius: 12px;
        padding: 20px; margin-bottom: 1rem; box-shadow: 0 4px 12px rgba(0,0,0,0.05);
        transition: transform 0.2s, box-shadow 0.2s;
        height: 200px; /* –ù–µ–º–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–∏–º –≤—ã—Å–æ—Ç—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ */
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }
    .vacancy-card:hover { transform: translateY(-5px); box-shadow: 0 8px 20px rgba(0,0,0,0.08); }
    .vacancy-title { font-size: 1.1rem; font-weight: bold; color: #1B263B; margin-bottom: 0.5rem; }
    .sub-header { font-size: 1.8rem; font-weight: bold; color: #1B263B; margin-top: 2rem; margin-bottom: 1rem; border-bottom: 3px solid #415A77; padding-bottom: 0.5rem;}
    .section-header { font-size: 1.4rem; font-weight: bold; color: #1B263B; margin-top: 1.5rem; margin-bottom: 1rem; }
    .stButton>button { border-radius: 8px; border: 1px solid #415A77; background-color: #415A77; color: white; padding: 0.5rem 1.25rem; font-weight: 600; }
    .stButton>button:hover { background-color: #1B263B; border-color: #1B263B; color: white; }
    mark { background-color: #FFF9C4; padding: 0.2em; border-radius: 3px;}
</style>
""", unsafe_allow_html=True)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Session State ---
def init_session_state():
    defaults = {
        'hh_selected_vacancy_id': None,
        'structured_keywords': None,
        'current_user': None,
        'hh_active_vacancies': []
    }
    for key, value in defaults.items():
        if key not in st.session_state:
            st.session_state[key] = value

init_session_state()

# --- –§—É–Ω–∫—Ü–∏–∏-–ø–æ–º–æ—â–Ω–∏–∫–∏ ---
def fetch_initial_data():
    if st.session_state.current_user is None:
        st.session_state.current_user = hh.get_current_user_info()
    if not st.session_state.hh_active_vacancies and hh.get_access_token():
        with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π..."):
            managers = hh.get_managers()
            if managers:
                st.session_state.hh_active_vacancies = hh.get_active_vacancies([m['id'] for m in managers])

def highlight_snippet(text):
    if not text: return ""
    return text.replace('<highlighttext>', '<mark>').replace('</highlighttext>', '</mark>')

# --- UI –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã ---
def display_vacancy_card(vacancy):
    with st.container(border=True):
        city = vacancy.get('area', {}).get('name', '–ì–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω')
        st.markdown(f'<div class="vacancy-card"><div>'
                    f'<p class="vacancy-title">{vacancy["name"]}</p>'
                    f'<span style="color: #778DA9; font-size: 0.9em;">üìç {city}</span>'
                    f'</div>', unsafe_allow_html=True)
        if st.button("–ù–∞–π—Ç–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤", key=f"process_hh_{vacancy['id']}", use_container_width=True):
            st.session_state.hh_selected_vacancy_id = vacancy['id']
            st.session_state.structured_keywords = None
            if 'hh_search_results' in st.session_state: del st.session_state.hh_search_results
            st.rerun()
        st.markdown('</div>', unsafe_allow_html=True)

def render_home_page():
    if st.session_state.current_user:
        user = st.session_state.current_user
        st.markdown(f"### –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.get('first_name', '')} {user.get('last_name', '')}!")
    st.markdown('<div class="sub-header">–ê–∫—Ç–∏–≤–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏</div>', unsafe_allow_html=True)
    if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫"):
        st.session_state.hh_active_vacancies = []
        fetch_initial_data()
        st.rerun()

    # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ "–º–æ–∏" –∏ "–≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ"
    my_vacancies = []
    other_vacancies = []
    user_id = st.session_state.current_user.get('id') if st.session_state.current_user else None
    
    if user_id:
        for v in st.session_state.hh_active_vacancies:
            if v.get('manager', {}).get('id') == user_id:
                my_vacancies.append(v)
            else:
                other_vacancies.append(v)
    else:
        other_vacancies = st.session_state.hh_active_vacancies

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "–ú–æ–∏ –≤–∞–∫–∞–Ω—Å–∏–∏"
    st.markdown('<div class="section-header">–ú–æ–∏ –≤–∞–∫–∞–Ω—Å–∏–∏</div>', unsafe_allow_html=True)
    if my_vacancies:
        cols = st.columns(3)
        for i, vacancy in enumerate(my_vacancies):
            with cols[i % 3]:
                display_vacancy_card(vacancy)
    else:
        st.info("–£ –≤–∞—Å –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π.")

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "–í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏"
    st.markdown('<div class="section-header">–í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏</div>', unsafe_allow_html=True)
    if other_vacancies:
        cols = st.columns(3)
        for i, vacancy in enumerate(other_vacancies):
            with cols[i % 3]:
                display_vacancy_card(vacancy)
    elif not my_vacancies:
        st.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –≤ –∫–æ–º–ø–∞–Ω–∏–∏.")


def render_keyword_extraction_page():
    vacancy_id = st.session_state.hh_selected_vacancy_id
    vacancy_details = hh.get_vacancy_details(vacancy_id)
    if not vacancy_details:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –≤–∞–∫–∞–Ω—Å–∏–∏.")
        if st.button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"): st.session_state.hh_selected_vacancy_id = None; st.rerun()
        return

    st.markdown('<div class="sub-header">–ü–æ–∏—Å–∫ –ø–æ –≤–∞–∫–∞–Ω—Å–∏–∏</div>', unsafe_allow_html=True)
    if st.button("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –≤–∞–∫–∞–Ω—Å–∏–π"):
        st.session_state.hh_selected_vacancy_id = None; st.rerun()

    # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ –æ–ø—ã—Ç –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö
    st.markdown(f"## {vacancy_details.get('name')}")
    st.caption(f"–¢—Ä–µ–±—É–µ–º—ã–π –æ–ø—ã—Ç: **{vacancy_details.get('experience', {}).get('name', '–ù–µ —É–∫–∞–∑–∞–Ω')}**")

    with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏"):
        soup = BeautifulSoup(vacancy_details.get('description', ''), 'html.parser')
        st.markdown(soup.prettify(), unsafe_allow_html=True)

    if st.session_state.structured_keywords is None:
        st.session_state.structured_keywords = hh.generate_keywords_with_openai(
            vacancy_details.get("name", ""), vacancy_details.get("description", ""))
    
    keywords = st.session_state.structured_keywords
    if not keywords:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞."); return

    st.markdown("#### –®–∞–≥ 1: –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞")
    with st.container(border=True):
        st.info("–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ (—Ä–∞–∑–¥–µ–ª—è–π—Ç–µ –∑–∞–ø—è—Ç–æ–π)")
        keywords['must_have'] = st.text_input("–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ (AND)", ", ".join(keywords.get('must_have', [])), key=f"must_{vacancy_id}").split(',')
        keywords['technologies'] = st.text_input("–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ (OR)", ", ".join(keywords.get('technologies', [])), key=f"tech_{vacancy_id}").split(',')
        keywords['domain'] = st.text_input("–°—Ñ–µ—Ä–∞/–î–æ–º–µ–Ω (OR)", ", ".join(keywords.get('domain', [])), key=f"domain_{vacancy_id}").split(',')
        keywords['negative_keywords'] = st.text_input("–ú–∏–Ω—É—Å-—Å–ª–æ–≤–∞ (NOT)", ", ".join(keywords.get('negative_keywords', [])), key=f"neg_{vacancy_id}").split(',')
        for k in keywords: keywords[k] = [item.strip() for item in keywords[k] if item.strip()]
        st.session_state.structured_keywords = keywords

    st.markdown("#### –®–∞–≥ 2: –†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä—ã")
    search_mode = st.radio("–†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞:", ["–°—Ç—Ä–æ–≥–∏–π", "–°—Ä–µ–¥–Ω–∏–π", "–û–±—à–∏—Ä–Ω—ã–π"], index=1, horizontal=True)

    kz_areas_dict = hh.get_area_dictionary()
    area_options = list(kz_areas_dict.keys())

    # 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–≥–∏–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –≤–∞–∫–∞–Ω—Å–∏–∏
    default_area_name = vacancy_details.get('area', {}).get('name', '–ê—Å—Ç–∞–Ω–∞')
    default_index = area_options.index(default_area_name) if default_area_name in area_options else 0
    
    # 3. –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö
    col1, col2 = st.columns(2)
    with col1:
        st.markdown("##### **–¢–æ—á–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏**")
        user_job_title = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ):")
        bank_only = st.checkbox("–ò—Å–∫–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã –≤ –±–∞–Ω–∫–µ")
        
        st.markdown("##### **–°—Ç–∞—Ç—É—Å –∏ –∑–∞–Ω—è—Ç–æ—Å—Ç—å**")
        job_search_status = st.multiselect("–°—Ç–∞—Ç—É—Å –ø–æ–∏—Å–∫–∞:",
            options=['active_search', 'looking_for_offers', 'has_job_offer'], default=['active_search', 'looking_for_offers'],
            format_func=lambda x: {'active_search': '–ê–∫—Ç–∏–≤–Ω—ã–π', 'looking_for_offers': '–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç', 'has_job_offer': '–ï—Å—Ç—å –æ—Ñ—Ñ–µ—Ä'}.get(x, x))
    
    with col2:
        st.markdown("##### **–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è**")
        experience = st.multiselect("–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:",
            options=["noExperience", "between1And3", "between3And6", "moreThan6"], default=["between3And6"],
            format_func=lambda x: {"noExperience": "–ù–µ—Ç", "between1And3": "1-3", "between3And6": "3-6", "moreThan6": "6+"}.get(x, x))
        
        education_levels = st.multiselect("–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:",
            options=['higher', 'bachelor', 'master', 'special_secondary', 'secondary', 'unfinished_higher', 'candidate', 'doctor'], default=['higher', 'bachelor'],
            format_func=lambda x: {'higher': '–í—ã—Å—à–µ–µ', 'bachelor': '–ë–∞–∫–∞–ª–∞–≤—Ä', 'master': '–ú–∞–≥–∏—Å—Ç—Ä', 'special_secondary': '–°—Ä–µ–¥–Ω–µ–µ —Å–ø–µ—Ü.', 'secondary' : '–°—Ä–µ–¥–Ω–µ–µ',
                                   'unfinished_higher':'–ù–µ–æ–∫–æ–Ω—á–µ–Ω–Ω–æ–µ –≤—ã—Å—à–µ–µ','candidate':'–ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–∞—É–∫','doctor':'–î–æ–∫—Ç–æ—Ä –Ω–∞—É–∫'}.get(x,x))
        
        # –ù–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä –ø–æ —è–∑—ã–∫–∞–º
        languages = st.multiselect("–ó–Ω–∞–Ω–∏–µ —è–∑—ã–∫–æ–≤:",
            options=['rus', 'kaz', 'eng'], default=[],
            format_func=lambda x: {'rus': '–†—É—Å—Å–∫–∏–π', 'kaz': '–ö–∞–∑–∞—Ö—Å–∫–∏–π', 'eng': '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π'}.get(x,x))


    if st.button("üöÄ –ù–∞–π—Ç–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤", use_container_width=True, type="primary"):
        search_filters = {
            "area": vacancy_details.get('area', {}).get('id', '160'),
            "employment": ["full"],
            "experience": experience,
            "job_search_status": job_search_status,
            "education_levels": education_levels,
            "language": languages, # –î–æ–±–∞–≤–ª—è–µ–º —è–∑—ã–∫–∏
            "per_page": 20,
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ query builder
            "user_job_title": user_job_title,
            "bank_only": bank_only,
        }
        st.session_state.hh_search_results = hh.advanced_search_resumes(keywords, search_filters, search_mode)

    if 'hh_search_results' in st.session_state and st.session_state.hh_search_results:
        results = st.session_state.hh_search_results
        st.markdown(f'<div class="section-header">–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—é–º–µ: {results.get("found", 0)}</div>', unsafe_allow_html=True)
        for item in results.get('items', []):
            resume = item.get("data", {})
            score = item.get("score", 0)
            with st.container(border=True):
                col_r1, col_r2 = st.columns([4, 1])
                with col_r1:
                    st.markdown(f"**{resume.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}**")
                    last_job = (resume.get('experience') or [{}])[0]
                    st.markdown(f"üè¢ {last_job.get('company', '–ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω–æ')} ‚Äî **{last_job.get('position', '–î–æ–ª–∂–Ω–æ—Å—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞')}**")
                    st.caption(f"–í–æ–∑—Ä–∞—Å—Ç: {resume.get('age', 'N/A')}")
                    snippet_html = resume.get('snippet', {}).get('requirement', '') or resume.get('snippet', {}).get('responsibility', '')
                    if snippet_html: st.markdown(f"<div style='font-size:0.9em;margin-top:8px;'>{highlight_snippet(snippet_html)}</div>", unsafe_allow_html=True)
                with col_r2:
                    #st.markdown(f"<div style='text-align:right;'><span class='stBadge'>–ë–∞–ª–ª: {score}</span></div>", unsafe_allow_html=True)
                    st.link_button("üîó –Ω–∞ HH.ru", resume.get('alternate_url', '#'), use_container_width=True)



# --- –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ---
def main():
    with st.sidebar:
       st.markdown('<h1 class="sidebar-header">ForteTalent</h1>', unsafe_allow_html=True)
       st.markdown("---")
       page_options = ["–ü–æ–∏—Å–∫ HH", "–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ", "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", "–û—Ç–∫–ª–∏–∫–∏"]
       
       st.session_state.app_page = st.radio("–ù–∞–≤–∏–≥–∞—Ü–∏—è:", page_options)
       st.markdown("---")
    fetch_initial_data()
    
    if st.session_state.hh_selected_vacancy_id:
        render_keyword_extraction_page()
    else:
        render_home_page()

if __name__ == "__main__":
    main()

